{-| Interface to the @hostname@ cmdline utility. -}
module MockIO.Cmds.InetUtils.Hostname
  ( hostname )
where

import Base1T

-- data-textual ------------------------

import Data.Textual  ( Parsed( Malformed, Parsed ), parseText )

-- domainnames -------------------------

import DomainNames.Hostname  ( Hostname )

-- fpath -------------------------------

import FPath.Error.FPathError  ( AsFPathError )

-- lens --------------------------------

import Control.Lens.Getter  ( view )

-- log-plus ----------------------------

import Log  ( Log )

-- logging-effect ----------------------

import Control.Monad.Log  ( MonadLog, Severity )

-- mockio ------------------------------

import MockIO.DoMock  ( HasDoMock( doMock ) )

-- mockio-log --------------------------

import MockIO.IOClass      ( IOClass( IOCmdR ), ioClass )
import MockIO.Log          ( logResult )
import MockIO.MockIOClass  ( MockIOClass )

-- mockio-plus -------------------------

import MockIO.Process            ( Íô© )

-- monadio-plus ------------------------

import MonadIO.Error.CreateProcError  ( AsCreateProcError )
import MonadIO.Error.ProcExitError    ( AsProcExitError )

-- mtl ---------------------------------

import Control.Monad.Reader  ( MonadReader, asks )

-- safe --------------------------------

import Safe  ( succSafe )

-- stdmain -----------------------------

import StdMain.ProcOutputParseError ( AsProcOutputParseError
                                    , throwAsProcOutputParseError )

-- text --------------------------------

import Data.Text  ( dropWhileEnd )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import qualified MockIO.Cmds.InetUtils.Paths  as  Paths

--------------------------------------------------------------------------------

chomp ‚à∑ ùïã ‚Üí ùïã
chomp = dropWhileEnd (\ c ‚Üí c ‚àà "\r\n")

hostname ‚à∑ ‚àÄ Œµ œÅ Œº .
           (MonadIO Œº, HasDoMock œÅ, MonadReader œÅ Œº,
            MonadLog (Log MockIOClass) Œº,
            AsProcOutputParseError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ,
            AsFPathError Œµ, AsIOError Œµ, Printable Œµ,
            MonadError Œµ Œº, HasCallStack) ‚áí
           Severity ‚Üí Œº Hostname
hostname sev = do
  do_mock ‚Üê asks (view doMock)
  let vmsg ‚à∑ ùïÑ (Hostname ‚Üí [ùïã])
      vmsg = ùïµ $ pure ‚àò [fmt|%T|]
      log_attr = def & ioClass ‚ä¢ IOCmdR & doMock ‚ä¢ do_mock
  t ‚Üê snd ‚ä≥ Íô© (Paths.hostname,["--fqdn"‚à∑ùïã],succSafe sev,"myhost.foo.bar"‚à∑ùïã)
  h ‚Üê case parseText (chomp t ‚äï ".") of
    Parsed    h   ‚Üí return h
    Malformed _ e ‚Üí throwAsProcOutputParseError e
  logResult sev log_attr do_mock "hstnm" vmsg (ùïΩ h)

-- that's all, folks! ----------------------------------------------------------
